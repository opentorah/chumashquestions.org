plugins {
  id 'base'
  id 'com.github.ben-manes.versions' version '0.44.0'
}

repositories {
  mavenCentral()
}

final File asciidocSourceDir = file("$projectDir/src/docs/asciidoc/")
//final File buildDirectory = layout.buildDirectory.asFile.get()
final File asciidocOutputDir = file("$buildDir/docs/asciidoc")
final File siteDir = file("$projectDir/docs")

final List<String> asciidoctorArgs = [
  "--source-dir=$asciidocSourceDir",
  '--verbose',
  '--trace',
  "--attribute=allow-uri-read=true",
//  "--attribute=reproducible=true",
//  "--attribute=toclevels=1",
//  "--attribute=multipage-level=1",
//  "--attribute=hide-uri-scheme=true",

  // Note: only when both the `--source-dir` is specified *and* there is a glob in the input files
  // does Asciidoctor preserve the directory structure: https://github.com/asciidoctor/asciidoctor/issues/1394
  "**/book.adoc",
  "**/index.adoc"
]

// see https://docs.gradle.org/current/userguide/service_injection.html#execoperations

interface InjectedExecOps {
  @Inject //@javax.inject.Inject
  ExecOperations getExecOps()
}

ext.asciidoctorRun = { additionalArguments ->
  project.objects.newInstance(InjectedExecOps).execOps.exec {
    executable = "asciidoctor"
    args = additionalArguments + asciidoctorArgs
  }
}

tasks.register('asciidoctorExternal') {
  group = 'documentation'

  outputs.dir(asciidocOutputDir)
  inputs.dir(asciidocSourceDir)

  doLast {
    // Note: there seems to be no analogue for the Asciidoctor Gradle plugin's
    // `separateOutputDirs` (https://asciidoctor.github.io/asciidoctor-gradle-plugin/development-3.x/user-guide/),
    // so I am running Asciidoctor separately for each backend with appropriate `--destination-dir`.
    asciidoctorRun([
      "--destination-dir=$asciidocOutputDir/multipage_html5",
      "--require=asciidoctor-multipage",
      "--backend=multipage_html5"
    ])
    asciidoctorRun([
      "--destination-dir=$asciidocOutputDir/html5",
      "--backend=html5"
    ])
    asciidoctorRun([
      "--destination-dir=$asciidocOutputDir/pdf",
      "--require=asciidoctor-pdf",
      "--backend=pdf"
    ])

    project.copy {
      into siteDir

      from "$asciidocOutputDir/html5/styles.css"
      from "$asciidocOutputDir/html5/index.html"
      from "$asciidocOutputDir/html5/book.html"
      from "$asciidocOutputDir/pdf/book.pdf"
    }
    project.copy {
      into "$siteDir/html"
      from "$asciidocOutputDir/multipage_html5"
      exclude 'index.html'
    }
  }
}

tasks.named('build') {
  dependsOn(asciidoctorExternal)
}

final String httpPort = '8080'
tasks.register('serveSite', Exec) {
  group = 'documentation'
  dependsOn(asciidoctorExternal)
  doFirst {
    logger.lifecycle("Serving " + siteDir + " on port " + httpPort)
  }
  workingDir siteDir
  commandLine 'python', '-m', 'http.server', httpPort
}
